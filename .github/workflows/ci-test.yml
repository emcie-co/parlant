name: Verify and Test

on:
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  build:
    runs-on: ubuntu-24.04

    if: ${{ !contains(format('{0} {1}', github.event.pull_request.title, github.event.pull_request.head.ref), 'wip') && !contains(format('{0} {1}', github.event.pull_request.title, github.event.pull_request.head.ref), 'WIP') }}

    strategy:
      matrix:
        python-version: ["3.10"]
        poetry-version: ["1.8.3"]

    env:
      SSH_AUTH_SOCK: /tmp/ssh_agent.sock
    
    steps:  
    - name: checkout branch commit
      uses: actions/checkout@v4

    - name: 'Set up Python (cache: pip)'
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Initial Configs and Install Poetry
      run: |
        pip install poetry==${{ matrix.poetry-version }}
        git config --local core.hooksPath .githooks/
        chmod +x .githooks/pre-commit .githooks/pre-push
    
    - name: Set up Poetry Cache
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'poetry'

    - name: Setup SSH 
      run: |
        ssh-agent -a $SSH_AUTH_SOCK > /dev/null
        ssh-add - <<< "${{ secrets.MC_DEPLOY_PTSTS }}" 

    - name: Install packages
      run: python scripts/install_packages.py

    - name: Determine test plan
      id: test_plan
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" && "${{ github.base_ref }}" == "develop" ]]; then
          PLAN="initial"
        elif [[ "${{ github.event_name }}" == "push" && "${{ github.base_ref }}" == "develop" ]]; then
          PLAN="initial"
        elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.base_ref }}" == "main" ]]; then
          PLAN="initial"
        elif [[ "${{ github.event_name }}" == "push" && "${{ github.base_ref }}" == "main" ]]; then
          PLAN="initial"
        else
          echo "how did we get here?"
          PLAN="initial"
        fi
        echo plan=$PLAN >> $GITHUB_OUTPUT
        echo "Using plan '$PLAN' for ${{ github.event_name }} to ${{ github.base_ref }}"

    - name: Test Parlant
      if: always()
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        mkdir logs
        poetry run pytest -v \
          --plan=${{ steps.test_plan.outputs.plan }} \
          --tap-combined \
          --tap-outdir=logs \
          --junit-xml=logs/testresults.xml \
          | tee logs/testresults.log
        exit ${PIPESTATUS[0]}
    
    - name: test log artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: testresults
        path: |
          logs/testresults.tap
          logs/testresults.log
          logs/testresults.xml
          
