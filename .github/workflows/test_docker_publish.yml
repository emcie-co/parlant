name: Test Docker Publish v0  

on:
  pull_request:
    branches: [ "develop" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: emcie-co/parlant

jobs:
  build:
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:

      - name: Prepare disk report script
        run: |

          REPORTS_DIR="/tmp/disk_reports"

          cat > /tmp/generate_disk_report.sh << 'EOL'
          #!/bin/bash
          set -e 
          report_num=$1
          REPORTS_DIR="/tmp/disk_reports"
          
          sudo mkdir -p "$REPORTS_DIR"
          sudo chown -R $USER:$USER "$REPORTS_DIR"

          {
            echo "=== Directory Sizes (100M+) ==="
            sudo du -hx --threshold=100M --exclude=/proc --exclude=/sys / 2>/dev/null | sort -hr || echo "Error in du command"

            echo -e "\n=== Filesystem Information ==="
            df -h || echo "Error in df command"
            
            echo -e "\n=== Large Files (10M+) ==="
            sudo find / -type f -size +10M -exec ls -lh {} \; 2>/dev/null | sort -k5 -hr || echo "Error in find command"

            echo -e "\n=== Top Space Usage Directories ==="
            head -n 20 < <(sudo du /usr/ -hx -d 4 --threshold=1G 2>/dev/null | sort -hr) || echo "Error in du /usr command"
            
            echo -e "\n=== Top Packages by Size ==="
            head -n 20 < <(dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -nr) || echo "Error in dpkg-query command"
          } > "$REPORTS_DIR/report_${report_num}.txt"

          sudo chown $USER:$USER "$REPORTS_DIR/report_${report_num}.txt"
          EOL
          chmod +x /tmp/generate_disk_report.sh


      - name: Generate disk report 0
        run: /tmp/generate_disk_report.sh 0

      - name: Free disk space
        run: |
          # 1. Remove docker images first (largest impact)
          sudo docker rmi $(docker image ls -aq) >/dev/null 2>&1 || true
          
          # 2. Remove large development toolchains and SDK directories
          sudo rm -rf \
            /opt/hostedtoolcache/* \
            /usr/local/lib/android \
            /usr/share/dotnet \
            /usr/local/share/powershell \
            /usr/share/swift \
            /opt/ghc \
            /usr/local/.ghcup \
            /usr/lib/jvm \
            /usr/local/julia* \
            /usr/local/n \
            /usr/local/share/chromium \
            /usr/local/share/vcpkg \
            >/dev/null 2>&1 || true
            
          # 3. Clean up large package caches and data
          sudo rm -rf \
            /var/lib/docker/* \
            /var/lib/gems/* \
            /var/lib/apt/lists/* \
            /var/cache/* \
            /var/lib/snapd \
            >/dev/null 2>&1 || true

          # 4. Remove unnecessary large packages
          sudo apt-get remove -y \
            azure-cli \
            google-cloud-sdk \
            firefox \
            google-chrome-stable \
            microsoft-edge-stable \
            mysql* \
            mongodb-org* \
            dotnet* \
            php* \
            >/dev/null 2>&1 || true

          # 5. Clean up package system
          sudo apt-get autoremove -y >/dev/null 2>&1
          sudo apt-get clean -y >/dev/null 2>&1

      - name: Generate disk report 1
        run: /tmp/generate_disk_report.sh 1

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20
        with:
          cosign-release: 'v2.2.4'

      - name: Generate disk report 3
        run: /tmp/generate_disk_report.sh 3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=edge

      - name: Generate disk report 6
        run: /tmp/generate_disk_report.sh 6

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

      - name: Generate disk report 8
        run: /tmp/generate_disk_report.sh 8

      - name: Upload all disk reports
        uses: actions/upload-artifact@v4
        with:
          name: disk-usage-reports
          path: /tmp/disk_reports/