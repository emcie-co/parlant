name: Test Docker Publish v2

on:
  pull_request:
    branches: [ "develop" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: emcie-co/parlant

jobs:
  build:
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Generate disk report 0
        run: |
          cat > ./generate_disk_report.sh << 'EOL'
          #!/bin/bash
          report_num=$1
          mkdir -p disk_reports
          
          echo "=== Directory Sizes (1M+) ===" > "disk_reports/report_${report_num}.txt"
          sudo du -hx --threshold=1M --exclude=/proc --exclude=/sys / 2>/dev/null | sort -hr >> "disk_reports/report_${report_num}.txt"
          
          echo -e "\n=== Filesystem Information ===" >> "disk_reports/report_${report_num}.txt"
          df -h >> "disk_reports/report_${report_num}.txt"
          
          echo -e "\n=== Large Files (1M+) ===" >> "disk_reports/report_${report_num}.txt"
          sudo find / -type f -size +1M -exec ls -lh {} \; 2>/dev/null | sort -k5 -hr >> "disk_reports/report_${report_num}.txt"
          
          echo -e "\n=== Top Space Usage Directories ===" >> "disk_reports/report_${report_num}.txt"
          sudo du /usr/ -hx -d 4 --threshold=1G 2>/dev/null | sort -hr | head -20 >> "disk_reports/report_${report_num}.txt"
          
          echo -e "\n=== Top Packages by Size ===" >> "disk_reports/report_${report_num}.txt"
          dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -nr | head -20 >> "disk_reports/report_${report_num}.txt"
          EOL
          chmod +x ./generate_disk_report.sh
          ./generate_disk_report.sh 0

      - name: Free disk space
        run: |
          sudo docker rmi $(docker image ls -aq) >/dev/null 2>&1 || true
          sudo rm -rf \
            /usr/share/dotnet /usr/local/lib/android /opt/ghc \
            /usr/local/share/powershell /usr/share/swift /usr/local/.ghcup \
            /usr/lib/jvm || true
          echo "some directories deleted"
          sudo apt install aptitude -y >/dev/null 2>&1
          sudo aptitude purge aria2 ansible azure-cli shellcheck rpm xorriso zsync \
            esl-erlang firefox gfortran-8 gfortran-9 google-chrome-stable \
            google-cloud-sdk imagemagick \
            libmagickcore-dev libmagickwand-dev libmagic-dev ant ant-optional kubectl \
            mercurial apt-transport-https mono-complete libmysqlclient \
            unixodbc-dev yarn chrpath libssl-dev libxft-dev \
            libfreetype6 libfreetype6-dev libfontconfig1 libfontconfig1-dev \
            snmp pollinate libpq-dev postgresql-client powershell ruby-full \
            sphinxsearch subversion mongodb-org azure-cli microsoft-edge-stable \
            -y -f >/dev/null 2>&1
          sudo aptitude purge google-cloud-sdk -f -y >/dev/null 2>&1
          sudo aptitude purge microsoft-edge-stable -f -y >/dev/null 2>&1 || true
          sudo apt purge microsoft-edge-stable -f -y >/dev/null 2>&1 || true
          sudo aptitude purge '~n ^mysql' -f -y >/dev/null 2>&1
          sudo aptitude purge '~n ^php' -f -y >/dev/null 2>&1
          sudo aptitude purge '~n ^dotnet' -f -y >/dev/null 2>&1
          sudo apt-get autoremove -y >/dev/null 2>&1
          sudo apt-get autoclean -y >/dev/null 2>&1
          echo "some packages purged"

      - name: Generate disk report 1
        run: ./generate_disk_report.sh 1

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate disk report 2
        run: ./generate_disk_report.sh 2

      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20
        with:
          cosign-release: 'v2.2.4'

      - name: Generate disk report 3
        run: ./generate_disk_report.sh 3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226

      - name: Generate disk report 4
        run: ./generate_disk_report.sh 4

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate disk report 5
        run: ./generate_disk_report.sh 5

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=edge

      - name: Generate disk report 6
        run: ./generate_disk_report.sh 6

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate disk report 7
        run: ./generate_disk_report.sh 7

      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

      - name: Generate disk report 8
        run: ./generate_disk_report.sh 8

      - name: Upload all disk reports
        uses: actions/upload-artifact@v4
        with:
          name: disk-usage-reports
          path: disk_reports/