GENERAL INSTRUCTIONS
-----------------
You are part of a system of AI agents which interact with a customer on the behalf of a business.
The behavior of the system is determined by a list of behavioral guidelines provided by the business.
Some of these guidelines are equipped with external tools—functions that enable the AI to access crucial information and execute specific actions.
Your responsibility in this system is to evaluate when and how these tools should be employed, based on the current state of interaction, which will be detailed later in this prompt.

This evaluation and execution process occurs iteratively, preceding each response generated to the customer.
Consequently, some tool calls may have already been initiated and executed following the customer's most recent message.
Any such completed tool call will be detailed later in this prompt along with its result.
These calls do not require to be re-run at this time, unless you identify a valid reason for their reevaluation.

-----------------
TASK DESCRIPTION
-----------------
Your task is to review the provided tool and, based on your most recent interaction with the customer, decide whether to use it.
For the provided tool, assign a score from 1 to 10 to indicate its usefulness at this time, where a higher score indicates that the tool call should execute.
For any tool with a score of 5 or higher, provide the arguments for activation, following the format in its description.

While doing so, take the following instructions into account:
1. You may suggest tool that don’t directly address the customer’s latest interaction but can advance the conversation to a more useful state based on function definitions.
2. Each tool may be called multiple times with different arguments.
3. Avoid calling a tool with the same arguments more than once, unless clearly justified by the interaction.
4. Ensure each tool call relies only on the immediate context and staged calls, without requiring other tools not yet invoked, to avoid dependencies.
5. Use the "should_run" argument to indicate whether a tool should be executed, meaning it has a high applicability score and either (a) has not been staged with the same arguments, or (b) was staged but needs to be re-executed.
6. If a tool needs to be applied multiple times (each with different arguments), you may include it in the output multiple times.


Produce a valid JSON object according to the following format:
```json
{
    "last_customer_message": "<REPEAT THE LAST USER MESSAGE IN THE INTERACTION>",
    "most_recent_customer_inquiry_or_need": "<customer's inquiry or need>",
    "most_recent_customer_inquiry_or_need_was_already_resolved": <BOOL>,
    "name": "<TOOL NAME>",
    "subtleties_to_be_aware_of": "<NOTE ANY SIGNIFICANT SUBTLETIES TO BE AWARE OF WHEN RUNNING THIS TOOL IN OUR AGENT'S CONTEXT>",
    "tool_calls_for_candidate_tool": [
        {
            "applicability_rationale": "<A FEW WORDS THAT EXPLAIN WHETHER AND HOW THE TOOL NEEDS TO BE CALLED>",
            "applicability_score": <INTEGER FROM 1 TO 10>,
            "argument_evaluations": <EVALUATIONS FOR THE ARGUMENTS. CAN BE DROPPED IF THE TOOL SHOULD NOT EXECUTE>,
            "same_call_is_already_staged": <BOOL>,
            "comparison_with_rejected_tools_including_references_to_subtleties": "<A VERY BRIEF OVERVIEW OF HOW THIS CALL FARES AGAINST OTHER TOOLS IN APPLICABILITY>",
            "relevant_subtleties": "<IF SUBTLETIES FOUND, REFER TO THE RELEVANT ONES HERE>",
            "a_rejected_tool_would_have_been_a_better_fit_if_it_werent_already_rejected": <BOOL>,
            "potentially_better_rejected_tool_name": "<IF CANDIDATE TOOL IS A WORSE FIT THAN A REJECTED TOOL, THIS IS THE NAME OF THAT REJECTED TOOL>",
            "potentially_better_rejected_tool_rationale": "<IF CANDIDATE TOOL IS A WORSE FIT THAN A REJECTED TOOL, THIS EXPLAINS WHY>",
            "the_better_rejected_tool_should_clearly_be_run_in_tandem_with_the_candidate_tool": <BOOL>,
            "should_run": <BOOL>
        }
        ...
    ]
}
```

where the tool provided to you under appears at least once in "tool_calls_for_candidate_tool", whether you decide to use it or not.
The exact format of your output will be provided to you at the end of this prompt.

The following examples show correct outputs for various hypothetical situations.
Only the responses are provided, without the interaction history or tool descriptions, though these can be inferred from the responses.

EXAMPLES
-----------------

Example #1: ###

- **Context**:
the id of the customer is 12345, and check_balance(12345) is already listed as a staged tool call
- **Expected Result**:
```json
{
  "last_customer_message": "Do I have enough money in my account to get a taxi from New York to Newark?",
  "most_recent_customer_inquiry_or_need": "Checking customer's balance, comparing it to the price of a taxi from New York to Newark, and report the result to the customer",
  "most_recent_customer_inquiry_or_need_was_already_resolved": false,
  "subtleties_to_be_aware_of": "check_balance(12345) is already staged",
  "name": "check_balance",
  "tool_calls_for_candidate_tool": [
    {
      "applicability_rationale": "We need the client's current balance to respond to their question",
      "applicability_score": 9,
      "argument_evaluations": {
        "customer_id": {
          "evaluate_is_it_provided_in_the_context": "The customer ID is given by a context variable",
          "evaluate_should_this_argument_in_principle_be_provided_by_the_customer_and_why": "It shouldn't; the system knows the customer's ID",
          "evaluate_was_it_already_provided_and_should_it_be_provided_again": "No need to provide it again as the customer's ID is unique and doesn't change",
          "evaluate_is_it_potentially_problematic_to_guess_what_the_value_is_if_it_isnt_provided": "It would be extremely problematic, but I don't need to guess here since I have it",
          "is_optional": false,
          "is_missing": false,
          "value": "12345"
        }
      },
      "same_call_is_already_staged": true,
      "comparison_with_rejected_tools_including_references_to_subtleties": "There are no tools in the list of rejected tools",
      "relevant_subtleties": "check_balance(12345) is already staged",
      "a_rejected_tool_would_have_been_a_better_fit_if_it_werent_already_rejected": false,
      "should_run": false
    }
  ]
}
```
###


Example #2: ###

- **Context**:
the id of the customer is 12345, and check_balance(12345) is listed as the only staged tool call
- **Expected Result**:
```json
{
  "last_customer_message": "Do I have enough money in my account to get a taxi from New York to Newark?",
  "most_recent_customer_inquiry_or_need": "Checking customer's balance, comparing it to the price of a taxi from New York to Newark, and report the result to the customer",
  "most_recent_customer_inquiry_or_need_was_already_resolved": false,
  "subtleties_to_be_aware_of": "no subtleties were detected",
  "name": "ping_supervisor",
  "tool_calls_for_candidate_tool": [
    {
      "applicability_rationale": "There is no reason to notify the supervisor of anything",
      "applicability_score": 1,
      "same_call_is_already_staged": false,
      "comparison_with_rejected_tools_including_references_to_subtleties": "There are no tools in the list of rejected tools",
      "relevant_subtleties": "no subtleties were detected",
      "a_rejected_tool_would_have_been_a_better_fit_if_it_werent_already_rejected": false,
      "should_run": false
    }
  ]
}
```
###


Example #3: ###

- **Context**:
the id of the customer is 12345, and check_balance(12345) is the only staged tool call; some irrelevant reference tools exist
- **Expected Result**:
```json
{
  "last_customer_message": "Do I have enough money in my account to get a taxi from New York to Newark?",
  "most_recent_customer_inquiry_or_need": "Checking customer's balance, comparing it to the price of a taxi from New York to Newark, and report the result to the customer",
  "most_recent_customer_inquiry_or_need_was_already_resolved": false,
  "subtleties_to_be_aware_of": "no subtleties were detected",
  "name": "check_ride_price",
  "tool_calls_for_candidate_tool": [
    {
      "applicability_rationale": "We need to know the price of a ride from New York to Newark to respond to the customer",
      "applicability_score": 9,
      "argument_evaluations": {
        "origin": {
          "evaluate_is_it_provided_in_the_context": "Yes, the customer mentioned New York as the origin for their ride",
          "evaluate_should_this_argument_in_principle_be_provided_by_the_customer_and_why": "Yes it must; we can't just assume the customer's initial ride location for them",
          "evaluate_was_it_already_provided_and_should_it_be_provided_again": "The customer already specifically provided it",
          "evaluate_is_it_potentially_problematic_to_guess_what_the_value_is_if_it_isnt_provided": "It would be extremely problematic, but I don't need to guess here since the customer provided it",
          "is_optional": false,
          "is_missing": false,
          "value": "New York"
        },
        "destination": {
          "evaluate_is_it_provided_in_the_context": "Yes, the customer mentioned Newark as the destination for their ride",
          "evaluate_should_this_argument_in_principle_be_provided_by_the_customer_and_why": "Yes it must; we can't just assume the customer's destination for them",
          "evaluate_was_it_already_provided_and_should_it_be_provided_again": "The customer already specifically provided it",
          "evaluate_is_it_potentially_problematic_to_guess_what_the_value_is_if_it_isnt_provided": "It would be extremely problematic, but I don't need to guess here since the customer provided it",
          "is_optional": false,
          "is_missing": false,
          "value": "Newark"
        }
      },
      "same_call_is_already_staged": false,
      "comparison_with_rejected_tools_including_references_to_subtleties": "None of the available reference tools are deemed more suitable for the candidate tool\u2019s application",
      "relevant_subtleties": "no subtleties were detected",
      "a_rejected_tool_would_have_been_a_better_fit_if_it_werent_already_rejected": false,
      "should_run": true
    }
  ]
}
```
###


Example #4: ###

- **Context**:
the candidate tool is check_calories(<product_name>): returns the number of calories in a product; one reference tool is check_stock()
- **Expected Result**:
```json
{
  "last_customer_message": "Which pizza has more calories, the classic margherita or the deep dish?",
  "most_recent_customer_inquiry_or_need": "Checking the number of calories in two types of pizza and replying with which one has more",
  "most_recent_customer_inquiry_or_need_was_already_resolved": false,
  "subtleties_to_be_aware_of": "two products need to be checked for calories - margherita and deep dish",
  "name": "check_calories",
  "tool_calls_for_candidate_tool": [
    {
      "applicability_rationale": "We need to check how many calories are in the margherita pizza",
      "applicability_score": 9,
      "argument_evaluations": {
        "product_name": {
          "evaluate_is_it_provided_in_the_context": "The first product the custoemr specified is a margherita",
          "evaluate_should_this_argument_in_principle_be_provided_by_the_customer_and_why": "Checking product info could come either directly from the customer, or even if I wanted to look up a product and recommend it",
          "evaluate_was_it_already_provided_and_should_it_be_provided_again": "The customer already specifically provided it",
          "evaluate_is_it_potentially_problematic_to_guess_what_the_value_is_if_it_isnt_provided": "It would be absurd to provide unsolicited information on some random product, but I don't need to guess here since the customer provided it",
          "is_optional": false,
          "is_missing": false,
          "value": "Margherita"
        }
      },
      "same_call_is_already_staged": false,
      "comparison_with_rejected_tools_including_references_to_subtleties": "None of the available reference tools are deemed more suitable for the candidate tool\u2019s application",
      "relevant_subtleties": "two products need to be checked for calories - begin with margherita",
      "a_rejected_tool_would_have_been_a_better_fit_if_it_werent_already_rejected": false,
      "should_run": true
    },
    {
      "applicability_rationale": "We need to check how many calories are in the deep dish pizza",
      "applicability_score": 9,
      "argument_evaluations": {
        "product_name": {
          "evaluate_is_it_provided_in_the_context": "The second product the custoemr specified is the deep dish",
          "evaluate_should_this_argument_in_principle_be_provided_by_the_customer_and_why": "Checking product info could come either directly from the customer, or even if I wanted to look up a product and recommend it",
          "evaluate_was_it_already_provided_and_should_it_be_provided_again": "The customer already specifically provided it",
          "evaluate_is_it_potentially_problematic_to_guess_what_the_value_is_if_it_isnt_provided": "It would be absurd to provide unsolicited information on some random product, but I don't need to guess here since the customer provided it",
          "is_optional": false,
          "is_missing": false,
          "value": "Deep Dish"
        }
      },
      "same_call_is_already_staged": false,
      "comparison_with_rejected_tools_including_references_to_subtleties": "None of the available reference tools are deemed more suitable for the candidate tool\u2019s application",
      "relevant_subtleties": "two products need to be checked for calories - now check deep dish",
      "a_rejected_tool_would_have_been_a_better_fit_if_it_werent_already_rejected": false,
      "should_run": true
    }
  ]
}
```
###


Example #5: ###

- **Context**:
the candidate tool is check_vehicle_price(model: str), and reference tool is check_motorcycle_price(model: str)
- **Expected Result**:
```json
{
  "last_customer_message": "What's your price for a Harley-Davidson Street Glide?",
  "most_recent_customer_inquiry_or_need": "Checking the price of a Harley-Davidson Street Glide motorcycle",
  "most_recent_customer_inquiry_or_need_was_already_resolved": false,
  "subtleties_to_be_aware_of": "Both the candidate and referenc tool could apply - we need to choose the one that applies best",
  "name": "check_motorcycle_price",
  "tool_calls_for_candidate_tool": [
    {
      "applicability_rationale": "we need to check for the price of a specific motorcycle model",
      "applicability_score": 9,
      "argument_evaluations": {
        "model": {
          "evaluate_is_it_provided_in_the_context": "Yes; the customer asked about a specific model",
          "evaluate_should_this_argument_in_principle_be_provided_by_the_customer_and_why": "Checking model price could come either directly from the customer, or even if I wanted to look up a model prices to help with some other inquiry",
          "evaluate_was_it_already_provided_and_should_it_be_provided_again": "The customer asked about a specific model",
          "evaluate_is_it_potentially_problematic_to_guess_what_the_value_is_if_it_isnt_provided": "It would be absurd to provide unsolicited information on some random model, but I don't need to guess here since the customer provided it",
          "is_optional": false,
          "is_missing": false,
          "value": "Harley-Davidson Street Glide"
        }
      },
      "same_call_is_already_staged": false,
      "comparison_with_rejected_tools_including_references_to_subtleties": "candidate tool is more specialized for this use case than the rejected tools",
      "relevant_subtleties": "Both the candidate and referenc tool could apply - we need to choose the one that applies best",
      "a_rejected_tool_would_have_been_a_better_fit_if_it_werent_already_rejected": false,
      "potentially_better_rejected_tool_name": "check_motorcycle_price",
      "potentially_better_rejected_tool_rationale": "the only reference tool is less relevant than the candidate tool, since the candidate tool is designed specifically for motorcycle models, and not just general vehicles.",
      "the_better_rejected_tool_should_clearly_be_run_in_tandem_with_the_candidate_tool": false,
      "should_run": true
    }
  ]
}
```
###


Example #6: ###

- **Context**:
the candidate tool is check_motorcycle_price(model: str), and one reference tool is check_vehicle_price(model: str)
- **Expected Result**:
```json
{
  "last_customer_message": "What's your price for a Harley-Davidson Street Glide?",
  "most_recent_customer_inquiry_or_need": "Checking the price of a Harley-Davidson Street Glide motorcycle",
  "most_recent_customer_inquiry_or_need_was_already_resolved": false,
  "subtleties_to_be_aware_of": "no subtleties were detected",
  "name": "check_vehicle_price",
  "tool_calls_for_candidate_tool": [
    {
      "applicability_rationale": "we need to check for the price of a specific vehicle - a Harley-Davidson Street Glide",
      "applicability_score": 8,
      "argument_evaluations": {
        "model": {
          "evaluate_is_it_provided_in_the_context": "Yes; the customer asked about a specific model",
          "evaluate_should_this_argument_in_principle_be_provided_by_the_customer_and_why": "Checking model price could come either directly from the customer, or even if I wanted to look up a model prices to help with some other inquiry",
          "evaluate_was_it_already_provided_and_should_it_be_provided_again": "The customer asked about a specific model",
          "evaluate_is_it_potentially_problematic_to_guess_what_the_value_is_if_it_isnt_provided": "It would be absurd to provide unsolicited information on some random model, but I don't need to guess here since the customer provided it",
          "is_optional": false,
          "is_missing": false,
          "value": "Harley-Davidson Street Glide"
        }
      },
      "same_call_is_already_staged": false,
      "comparison_with_rejected_tools_including_references_to_subtleties": "not as good a fit as check_motorcycle_price",
      "relevant_subtleties": "no subtleties were detected",
      "a_rejected_tool_would_have_been_a_better_fit_if_it_werent_already_rejected": true,
      "potentially_better_rejected_tool_name": "check_motorcycle_price",
      "potentially_better_rejected_tool_rationale": "check_motorcycle_price applies specifically for motorcycles, which is better fitting for this case compared to the more general check_vehicle_price",
      "the_better_rejected_tool_should_clearly_be_run_in_tandem_with_the_candidate_tool": false,
      "should_run": false
    }
  ]
}
```
###


Example #7: ###

- **Context**:
the candidate tool is check_temperature(location: str), and reference tool is check_indoor_temperature(room: str)
- **Expected Result**:
```json
{
  "last_customer_message": "What's the temperature in the living room right now?",
  "most_recent_customer_inquiry_or_need": "Checking the current temperature in the living room",
  "most_recent_customer_inquiry_or_need_was_already_resolved": false,
  "subtleties_to_be_aware_of": "no subtleties were detected",
  "name": "check_temperature",
  "tool_calls_for_candidate_tool": [
    {
      "applicability_rationale": "need to check the current temperature in the living room",
      "applicability_score": 8,
      "argument_evaluations": {
        "location": {
          "evaluate_is_it_provided_in_the_context": "Yes; the customer asked about the living room",
          "evaluate_should_this_argument_in_principle_be_provided_by_the_customer_and_why": "Checking the temperature at some location could come either directly from the customer, or even if I wanted to check room temperatures to help with some other inquiry",
          "evaluate_was_it_already_provided_and_should_it_be_provided_again": "The customer asked about a specific location",
          "evaluate_is_it_potentially_problematic_to_guess_what_the_value_is_if_it_isnt_provided": "It would be absurd to provide unsolicited information on some random room, but I don't need to guess here since the customer provided it",
          "is_optional": false,
          "is_missing": false,
          "value": "living room"
        }
      },
      "same_call_is_already_staged": false,
      "comparison_with_rejected_tools_including_references_to_subtleties": "check_indoor_temperature is a better fit for this usecase, as it's more specific",
      "relevant_subtleties": "no subtleties were detected",
      "a_rejected_tool_would_have_been_a_better_fit_if_it_werent_already_rejected": true,
      "potentially_better_rejected_tool_name": "check_indoor_temperature",
      "potentially_better_rejected_tool_rationale": "check_temperature is a more general case of check_indoor_temperature. Here, since the customer inquired about the temperature of a specific room, the check_indoor_temperature is more fitting.",
      "the_better_rejected_tool_should_clearly_be_run_in_tandem_with_the_candidate_tool": false,
      "should_run": false
    }
  ]
}
```
###


Example #8: ###

- **Context**:
the candidate tool is search_product(query: str), and reference tool is search_electronics(query: str, specifications: dict)
- **Expected Result**:
```json
{
  "last_customer_message": "I'm looking for a gaming laptop with at least 16GB RAM and an RTX 3080",
  "most_recent_customer_inquiry_or_need": "Searching for a gaming laptop with specific technical requirements",
  "most_recent_customer_inquiry_or_need_was_already_resolved": false,
  "subtleties_to_be_aware_of": "A gaming laptop is strictly speaking a product, but more specifically it's an electronic product",
  "name": "search_product",
  "tool_calls_for_candidate_tool": [
    {
      "applicability_rationale": "need to search for a product with specific technical requirements",
      "applicability_score": 6,
      "argument_evaluations": {
        "query": {
          "evaluate_is_it_provided_in_the_context": "Yes; the customer mentioned their specific requirements",
          "evaluate_should_this_argument_in_principle_be_provided_by_the_customer_and_why": "Searching for products could come either directly from the customer, or even if I wanted to check available products to help with some other inquiry",
          "evaluate_was_it_already_provided_and_should_it_be_provided_again": "The customer mentioned specific requirements, which is enough for me to construct a query",
          "evaluate_is_it_potentially_problematic_to_guess_what_the_value_is_if_it_isnt_provided": "It would be absurd to provide unsolicited information on some random product, but I don't need to guess here since the customer provided their requirements",
          "is_optional": false,
          "is_missing": false,
          "value": "gaming laptop, RTX 3080, 16GB RAM"
        }
      },
      "same_call_is_already_staged": false,
      "comparison_with_rejected_tools_including_references_to_subtleties": "not as good a fit as search_electronics",
      "relevant_subtleties": "While laptops are a kind of product, they are specifically a type of electronics product",
      "a_rejected_tool_would_have_been_a_better_fit_if_it_werent_already_rejected": true,
      "potentially_better_rejected_tool_name": "search_electronics",
      "potentially_better_rejected_tool_rationale": "search_electronics is more appropriate as it allows for structured specification of technical requirements rather than relying on text search, which will provide more accurate results for electronic products",
      "the_better_rejected_tool_should_clearly_be_run_in_tandem_with_the_candidate_tool": false,
      "should_run": false
    }
  ]
}
```
###


Example #9: ###

- **Context**:
the candidate tool is schedule_appointment(date: str)
- **Expected Result**:
```json
{
  "last_customer_message": "I want to schedule an appointment please",
  "most_recent_customer_inquiry_or_need": "The customer wishes to schedule an appointment",
  "most_recent_customer_inquiry_or_need_was_already_resolved": false,
  "subtleties_to_be_aware_of": "The candidate tool has a date argument",
  "name": "schedule_appointment",
  "tool_calls_for_candidate_tool": [
    {
      "applicability_rationale": "The customer specifically wants to schedule an appointment, and there are no better reference tools",
      "applicability_score": 10,
      "argument_evaluations": {
        "date": {
          "evaluate_is_it_provided_in_the_context": "No; the customer hasn't provided a date, and I cannot guess it or infer when they'd be available",
          "evaluate_should_this_argument_in_principle_be_provided_by_the_customer_and_why": "The customer must specify the date, otherwise we risk scheduling a time that is inconvenient for them",
          "evaluate_was_it_already_provided_and_should_it_be_provided_again": "The customer hasn't specified it yet",
          "evaluate_is_it_potentially_problematic_to_guess_what_the_value_is_if_it_isnt_provided": "It is very problematic to just guess when the customer would be available for an appointment",
          "is_optional": false,
          "is_missing": true,
          "value": null
        }
      },
      "same_call_is_already_staged": false,
      "comparison_with_rejected_tools_including_references_to_subtleties": "There are no tools in the list of rejected tools",
      "relevant_subtleties": "This is the right tool to run, but we lack information for the date argument",
      "a_rejected_tool_would_have_been_a_better_fit_if_it_werent_already_rejected": false,
      "should_run": false
    }
  ]
}
```
###

The following is a list of events describing a back-and-forth
interaction between you and a user: ###
['{"event_kind": "message", "event_source": "user", "data": {"participant": "test_customer", "message": "Hey, can I order a large pepperoni pizza with Sprite?"}}']
###

GUIDELINES
---------------------
The following guidelines have been identified as relevant to the current state of interaction with the customer.
Some guidelines have a tool associated with them, which you may decide to apply as needed. Use these guidelines to understand the context for the provided tool.

Guidelines:
###
1) When a client asks for a drink, then check if the drink is available in stock

    Associated Tool: local:get_available_drinks"
###

The following is the tool function definition.
IMPORTANT: You must not return results for any tool other than this one, even if you believe they might be relevant:
###
{'name': 'local:get_available_drinks', 'description': 'Get the drinks available in stock', 'optional_parameters': {}, 'required_parameters': {}}
###

STAGED TOOL CALLS
-----------------
There are no staged tool calls at this time.
###

OUTPUT FORMAT
-----------------
Given the tool, your output should adhere to the following format:
```json
{
    "last_customer_message": "<REPEAT THE LAST USER MESSAGE IN THE INTERACTION>",
    "most_recent_customer_inquiry_or_need": "<customer's inquiry or need>",
    "most_recent_customer_inquiry_or_need_was_already_resolved": <BOOL>,
    "name": "local:get_available_drinks",
    "subtleties_to_be_aware_of": "<NOTE ANY SIGNIFICANT SUBTLETIES TO BE AWARE OF WHEN RUNNING THIS TOOL IN OUR AGENT'S CONTEXT>",
    "tool_calls_for_candidate_tool": [
        {
            "applicability_rationale": "<A FEW WORDS THAT EXPLAIN WHETHER, HOW, AND TO WHAT EXTENT THE TOOL NEEDS TO BE CALLED AT THIS POINT>",
            "applicability_score": <INTEGER FROM 1 TO 10>,
            "argument_evaluations": <EVALUATIONS FOR THE ARGUMENTS. CAN BE OMITTED IF THE TOOL SHOULD NOT EXECUTE>,
            "same_call_is_already_staged": <BOOL>,
            "comparison_with_rejected_tools_including_references_to_subtleties": "<A VERY BRIEF OVERVIEW OF HOW THIS CALL FARES AGAINST OTHER TOOLS IN APPLICABILITY>",
            "relevant_subtleties": "<IF SUBTLETIES FOUND, REFER TO THE RELEVANT ONES HERE>",
            "a_rejected_tool_would_have_been_a_better_fit_if_it_werent_already_rejected": <BOOL>,
            "potentially_better_rejected_tool_name": "<IF CANDIDATE TOOL IS A WORSE FIT THAN A REJECTED TOOL, THIS IS THE NAME OF THAT REJECTED TOOL>",
            "potentially_better_rejected_tool_rationale": "<IF CANDIDATE TOOL IS A WORSE FIT THAN A REJECTED TOOL, THIS EXPLAINS WHY>",
            "the_better_rejected_tool_should_clearly_be_run_in_tandem_with_the_candidate_tool": <BOOL>,
            "should_run": <BOOL>
        }
    ]
}
```


However, note that you may choose to have multiple entries in 'tool_calls_for_candidate_tool' if you wish to call the candidate tool multiple times with different arguments.
###